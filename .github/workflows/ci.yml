name: CI

on:
  push:
    branches: [ main ]
    paths: [ 'Episode04/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'Episode04/**' ]
  workflow_dispatch:


jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Homebrew
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.bashrc
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    
    - name: Cache Homebrew packages
      uses: actions/cache@v3
      with:
        path: |
          /home/linuxbrew/.linuxbrew/Cellar/ffmpeg
          /home/linuxbrew/.linuxbrew/lib
          /home/linuxbrew/.linuxbrew/var/homebrew/locks
        key: homebrew-packages-${{ runner.os }}-ffmpeg-v4
        restore-keys: |
          homebrew-packages-${{ runner.os }}-
    
    - name: Install system dependencies for ffmpeg
      run: |
        # Install X11 and other system dependencies that Homebrew ffmpeg needs
        echo "Installing system dependencies for ffmpeg..."
        sudo apt-get update
        sudo apt-get install -y \
          libxcb-shape0 \
          libxcb-shm0 \
          libxcb-xfixes0 \
          libxcb1 \
          libx11-xcb1 \
          libxss1 \
          libxtst6 \
          libxrandr2 \
          libasound2t64 \
          libpangocairo-1.0-0 \
          libatk1.0-0 \
          libcairo-gobject2 \
          libgtk-3-0 \
          libgdk-pixbuf-2.0-0

    - name: Install ffmpeg via Homebrew with fallback
      run: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        
        # Check if ffmpeg exists and link it properly
        if brew list ffmpeg &> /dev/null; then
          echo "ffmpeg found in Homebrew. Ensuring it's properly linked..."
          brew unlink ffmpeg || true
          brew link ffmpeg --force
        else
          echo "Installing ffmpeg via Homebrew..."
          brew install ffmpeg
        fi
        
        # Test if Homebrew ffmpeg works with system libraries
        echo "Testing Homebrew ffmpeg..."
        if ! /home/linuxbrew/.linuxbrew/bin/ffmpeg -version &> /dev/null; then
          echo "Homebrew ffmpeg failed, falling back to apt-get..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          echo "Using system ffmpeg as fallback"
        fi
        
        # Verify final installation works
        echo "Final ffmpeg check:"
        which ffmpeg
        ffmpeg -version
    
    - name: Install and start Ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        sleep 10
    
    - name: Cache Ollama models
      uses: actions/cache@v3
      with:
        path: ~/.ollama
        key: ollama-models-bge-m3-v1
        restore-keys: |
          ollama-models-
    
    - name: Pull BGE-M3 model
      run: |
        if ! ollama list | grep -q "bge-m3"; then
          ollama pull bge-m3
        fi
    
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/whisper*
          /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/torch*
          /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/langchain*
          /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/chromadb*
        key: python-packages-${{ runner.os }}-${{ hashFiles('Episode04/requirements.txt') }}-v2
        restore-keys: |
          python-packages-${{ runner.os }}-
    
    - name: Install dependencies
      run: |
        echo "Installing dependencies with GitHub Actions Python..."
        which python3
        python3 --version
        python3 -m pip install --upgrade pip
        
        # Check if key packages are already installed (from cache)
        if python3 -c "import whisper" 2>/dev/null; then
          echo "âœ… Whisper already installed (from cache)"
        else
          echo "ðŸ“¦ Installing packages from requirements.txt..."
          python3 -m pip install -r Episode04/requirements.txt
        fi
        
        # Install ruff separately (lightweight)
        python3 -m pip install ruff
        
        echo "Verifying installations..."
        python3 -m pip list | grep -i whisper || echo "Whisper not found in pip list"
        python3 -c "import whisper; print('Whisper import successful')" || echo "Whisper import failed"
    
    - name: Run Ruff linter
      run: ruff check Episode04/
    
    - name: Run unit tests
      run: |
        cd Episode04
        python -m unittest discover -s . -p "test_*.py" -v
    
    - name: Run integration tests
      run: |
        # Set up environment with Homebrew for integration tests
        GITHUB_PYTHON=$(which python3)
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        echo "Checking environment..."
        echo "GitHub Actions Python: $GITHUB_PYTHON"
        echo "PATH: $PATH"
        $GITHUB_PYTHON --version
        $GITHUB_PYTHON -c "import whisper; print('whisper imported successfully')" || echo "whisper import failed"
        echo "Checking ffmpeg availability:"
        which ffmpeg
        ffmpeg -version
        cd Episode04
        # Export environment variables for subprocess inheritance
        export PATH="$PATH"
        export HOMEBREW_PREFIX="$HOMEBREW_PREFIX"
        export HOMEBREW_CELLAR="$HOMEBREW_CELLAR" 
        export HOMEBREW_REPOSITORY="$HOMEBREW_REPOSITORY"
        RAG_TEST_MAX_PDFS=5 $GITHUB_PYTHON integration_test_rag.py
